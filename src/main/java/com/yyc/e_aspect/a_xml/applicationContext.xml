<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="                                               
            http://www.springframework.org/schema/beans    
            http://www.springframework.org/schema/beans/spring-beans.xsd    
            http://www.springframework.org/schema/context     
            http://www.springframework.org/schema/context/spring-context.xsd    
            http://www.springframework.org/schema/mvc    
            http://www.springframework.org/schema/mvc/spring-mvc.xsd  
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx.xsd  
            http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop.xsd 
            ">
    <!-- 创建目标类 --> 
	<bean id="userServiceId" class="com.yyc.e_aspect.a_xml.UserServiceImpl"></bean>
	<!-- 创建切面类（通知） -->
	<bean id="myAspectId" class="com.yyc.e_aspect.a_xml.MyAspect"></bean>
	<!-- 3.aop编程
			aop:aspect:将切面类声明切面，从而获得通知方法
				ref：切面类引用
			aop:pointcut:声明一个切入点，所有的通知都可以使用
	 -->
	<aop:config>
		<aop:aspect ref="myAspectId">
			<aop:pointcut expression="execution(* com.yyc.e_aspect.a_xml.UserServiceImpl.*(..))" id="myPointCut"/>
			
			<!-- 前置通知 
					method:通知：即方法名
					pointcut：切入点表达式，此表达式只能当前通知使用
					pointcut-ref：切入点引用，可以与他人共享切入点 
				 通知方法格式：	public void myBefore(JoinPoint joinPoint){
								System.out.println("前置通知"+joinPoint.getSignature().getName());
							}
							参数1：joiinPoint 用于描述连接点（目标方法），获取目标方法名等
			-->
			<aop:before method="myBefore" pointcut-ref="myPointCut"/>
			
			<!-- 后置通知
					<aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" returning=""/>
					returning ：通知方法第二个参数的名称
			 -->
			<aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" returning="s"/>
			
			<!-- 环绕通知 -->
			<aop:around method="myAround" pointcut-ref="myPointCut"/>
			
			
			
			
			
			
			
		</aop:aspect>
	</aop:config>
</beans>  








